{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Session 1 Exercises\n",
    "These are sample answers for the in-class exercises in Session 1 of PHAS0030.  You should make sure that you can do these yourself ! The further work exercises will be in a separate notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We always start with appropriate imports; note the use of the IPython magic\n",
    "# command to set up Matplotlib within the notebook\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-class exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Arrays"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here are general approaches to creating the arrays using `arange` and `linspace`; notice how the approaches differ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n"
     ]
    }
   ],
   "source": [
    "step = 0.1\n",
    "lo_lim = 0.0\n",
    "up_lim = 1.0\n",
    "a = np.arange(lo_lim,up_lim+step,step)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n"
     ]
    }
   ],
   "source": [
    "span = int((up_lim-lo_lim)/step)\n",
    "b = np.linspace(lo_lim,up_lim,span+1)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n",
      "[45 46 47 48 49]\n",
      "[ 0  5 10 15 20 25 30 35 40 45]\n"
     ]
    }
   ],
   "source": [
    "len_S3Q2 = 50\n",
    "array_S3Q2 = np.arange(len_S3Q2)\n",
    "print(array_S3Q2[:5])\n",
    "print(array_S3Q2[len_S3Q2-5:])\n",
    "print(array_S3Q2[::5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[49  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n",
      " 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\n",
      " 47 48]\n",
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
      " 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n",
      " 49  0]\n"
     ]
    }
   ],
   "source": [
    "lshift = -1\n",
    "rshift = 1\n",
    "print(np.roll(array_S3Q2,rshift))\n",
    "print(np.roll(array_S3Q2,lshift))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[49  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n",
      " 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\n",
      " 47 48]\n",
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
      " 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n",
      " 49  0]\n"
     ]
    }
   ],
   "source": [
    "print(np.append(array_S3Q2[lshift:],array_S3Q2[0:lshift]))\n",
    "print(np.append(array_S3Q2[rshift:],array_S3Q2[0:rshift]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice how we can implement the shift left or right using slicing and negative indices, but that this gives apparently opposite behaviour to the `np.roll` function.  With the roll, the shift parameter is _subtracted off_ the index (so that 0 becomes -1, say, which is the final element)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  5 10 15 20]\n",
      " [25 30 35 40 45]]\n"
     ]
    }
   ],
   "source": [
    "print(np.reshape(array_S3Q2[::5],(2,5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "print(np.zeros((10,10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  0  0  0  0  0  0  0  0  0]\n",
      " [ 0  1  2  3  4  5  6  7  8  9]\n",
      " [ 0  2  4  6  8 10 12 14 16 18]\n",
      " [ 0  3  6  9 12 15 18 21 24 27]\n",
      " [ 0  4  8 12 16 20 24 28 32 36]\n",
      " [ 0  5 10 15 20 25 30 35 40 45]\n",
      " [ 0  6 12 18 24 30 36 42 48 54]\n",
      " [ 0  7 14 21 28 35 42 49 56 63]\n",
      " [ 0  8 16 24 32 40 48 56 64 72]\n",
      " [ 0  9 18 27 36 45 54 63 72 81]]\n"
     ]
    }
   ],
   "source": [
    "array_S3Q6 = np.arange(10)\n",
    "print(np.outer(array_S3Q6,array_S3Q6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3  4  5  6  7  8  9]\n",
      " [10 11 12 13 14 15 16 17 18 19]\n",
      " [20 21 22 23 24 25 26 27 28 29]\n",
      " [30 31 32 33 34 35 36 37 38 39]\n",
      " [40 41 42 43 44 45 46 47 48 49]\n",
      " [50 51 52 53 54 55 56 57 58 59]\n",
      " [60 61 62 63 64 65 66 67 68 69]\n",
      " [70 71 72 73 74 75 76 77 78 79]\n",
      " [80 81 82 83 84 85 86 87 88 89]\n",
      " [90 91 92 93 94 95 96 97 98 99]]\n",
      "[20 21 22 23 24 25 26 27 28 29]\n",
      "[ 3 13 23 33 43 53 63 73 83 93]\n",
      "[[22 23]\n",
      " [32 33]]\n"
     ]
    }
   ],
   "source": [
    "array_S3Q7 = np.reshape(np.arange(100),(10,10))\n",
    "print(array_S3Q7)\n",
    "print(array_S3Q7[2,])\n",
    "print(array_S3Q7[:,3])\n",
    "print(array_S3Q7[2:4,2:4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loops and control"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
      " [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n",
      " [ 0.  2.  4.  6.  8. 10. 12. 14. 16. 18.]\n",
      " [ 0.  3.  6.  9. 12. 15. 18. 21. 24. 27.]\n",
      " [ 0.  4.  8. 12. 16. 20. 24. 28. 32. 36.]\n",
      " [ 0.  5. 10. 15. 20. 25. 30. 35. 40. 45.]\n",
      " [ 0.  6. 12. 18. 24. 30. 36. 42. 48. 54.]\n",
      " [ 0.  7. 14. 21. 28. 35. 42. 49. 56. 63.]\n",
      " [ 0.  8. 16. 24. 32. 40. 48. 56. 64. 72.]\n",
      " [ 0.  9. 18. 27. 36. 45. 54. 63. 72. 81.]]\n",
      "[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
      " [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n",
      " [ 0.  2.  4.  6.  8. 10. 12. 14. 16. 18.]\n",
      " [ 0.  3.  6.  9. 12. 15. 18. 21. 24. 27.]\n",
      " [ 0.  4.  8. 12. 16. 20. 24. 28. 32. 36.]\n",
      " [ 0.  5. 10. 15. 20. 25. 30. 35. 40. 45.]\n",
      " [ 0.  6. 12. 18. 24. 30. 36. 42. 48. 54.]\n",
      " [ 0.  7. 14. 21. 28. 35. 42. 49. 56. 63.]\n",
      " [ 0.  8. 16. 24. 32. 40. 48. 56. 64. 72.]\n",
      " [ 0.  9. 18. 27. 36. 45. 54. 63. 72. 81.]]\n"
     ]
    }
   ],
   "source": [
    "array_S4Q1a = np.arange(10.0)\n",
    "array_S4Q1b = np.zeros((10,10))\n",
    "for i in range(10):\n",
    "    for j in range(10):\n",
    "        array_S4Q1b[i,j] = array_S4Q1a[i]*array_S4Q1a[j]\n",
    "print(array_S4Q1b)\n",
    "print(np.outer(array_S4Q1a,array_S4Q1a))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When I first wrote this, I used `np.arange(10)` and the resulting 2D array was integers (as opposed to the outer product which was floats).  Think about what this means."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 2, 4, 6, 8, 10, 3, 6, 9, 12, 15, 4, 8, 12, 16, 20, 5, 10, 15, 20, 25]\n"
     ]
    }
   ],
   "source": [
    "a = []\n",
    "for i in range(1,6):\n",
    "    for j in range(1,6):\n",
    "        a.append(i*j)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 2, 4, 6, 8, 10, 3, 6, 9, 12, 15, 4, 8, 12, 16, 20, 5, 10, 15, 20, 25]\n"
     ]
    }
   ],
   "source": [
    "a = [i*j for i in range(1,6) for j in range(1,6)]\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  2  3  4  5]\n",
      " [ 2  4  6  8 10]\n",
      " [ 3  6  9 12 15]\n",
      " [ 4  8 12 16 20]\n",
      " [ 5 10 15 20 25]]\n"
     ]
    }
   ],
   "source": [
    "array_S4Q4 = np.reshape([i*j for i in range(1,6) for j in range(1,6)], (5,5))\n",
    "print(array_S4Q4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 0, 0, 0, 0, 2, 4, 0, 0, 0, 3, 6, 9, 0, 0, 4, 8, 12, 16, 0, 5, 10, 15, 20, 25]\n"
     ]
    }
   ],
   "source": [
    "a = []\n",
    "for i in range(1,6):\n",
    "    for j in range(1,6):\n",
    "        a.append(i*j if j<i+1 else 0)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n"
     ]
    }
   ],
   "source": [
    "number = 5\n",
    "fac = 1\n",
    "count = 1\n",
    "while count<number+1:\n",
    "    fac *= count\n",
    "    count += 1\n",
    "print(fac)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2  squared is  4\n",
      "4  squared is  16\n",
      "6  squared is  36\n",
      "8  squared is  64\n",
      "10  squared is  100\n",
      "12  squared is  144\n",
      "14  squared is  196\n",
      "16  squared is  256\n",
      "18  squared is  324\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,20):\n",
    "    if i%2 == 0:\n",
    "        print(i,\" squared is \",i*i)\n",
    "    else:\n",
    "        continue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course there are many ways to do the preceding problem: starting the range at 2 and using a step of 2 would be one; doubling i would be another..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1  is prime\n",
      "2  is prime\n",
      "3  is prime\n",
      "5  is prime\n",
      "7  is prime\n",
      "11  is prime\n",
      "13  is prime\n",
      "17  is prime\n",
      "19  is prime\n",
      "23  is prime\n",
      "29  is prime\n",
      "31  is prime\n",
      "37  is prime\n",
      "41  is prime\n",
      "43  is prime\n",
      "47  is prime\n",
      "53  is prime\n",
      "59  is prime\n",
      "61  is prime\n",
      "67  is prime\n",
      "71  is prime\n",
      "73  is prime\n",
      "79  is prime\n",
      "83  is prime\n",
      "89  is prime\n",
      "97  is prime\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,101):\n",
    "    limit = np.sqrt(i)\n",
    "    factor = 2\n",
    "    while factor <= limit:\n",
    "        if i%factor==0:\n",
    "            break # We have found a factor, so this is not prime\n",
    "        factor += 1\n",
    "    else: # here the else is only executed when we end the loop\n",
    "        print(i,\" is prime\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 [0 1 2 3 4]\n",
      "0 0 0\n",
      "0 1 1\n",
      "0 2 2\n",
      "0 3 3\n",
      "0 4 4\n",
      "1 [5 6 7 8 9]\n",
      "1 0 5\n",
      "1 1 6\n",
      "1 2 7\n",
      "1 3 8\n",
      "1 4 9\n"
     ]
    }
   ],
   "source": [
    "array_S4Q9 = np.reshape(np.arange(10),(2,5))\n",
    "for i,v in enumerate(array_S4Q9):\n",
    "    print(i, v)\n",
    "    for j,w in enumerate(v):\n",
    "        print(i,j,w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def factorial(n): \n",
    "    '''Calculates the value of n!  Returns zero for \n",
    "       negative input and rounds down to nearest integer\n",
    "\n",
    "       Input:   n (number whose factorial is required)\n",
    "       Outputs: n!\n",
    "    '''\n",
    "\n",
    "    # Catch negative exception\n",
    "    if n<0:\n",
    "        return 0\n",
    "\n",
    "    # Round down and do first step\n",
    "    round_n = round(n)\n",
    "    fac = 1\n",
    "    next_number = 2\n",
    "    # Loop over next numbers\n",
    "    while next_number<=round_n:\n",
    "        fac *= next_number\n",
    "        next_number += 1\n",
    "    return fac"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n",
      "1\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print(factorial(5))\n",
    "print(factorial(0))\n",
    "print(factorial(-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fibonacci(n):\n",
    "    \"\"\"Simple Fibonacci number generator: for input n, returns nth term\"\"\"\n",
    "    if n == 0: return 0\n",
    "    if n == 1: return 1\n",
    "    return fibonacci(n-1) + fibonacci(n-2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the function above is _recursive_: it calls itself.  It will get *very* slow when you go to a large number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_array(a):\n",
    "    \"\"\"Split array a into even and odd terms and return two arrays\"\"\"\n",
    "    b = a[0::2]\n",
    "    c = a[1::2]\n",
    "    return b,c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([ 0,  2,  4,  6,  8, 10]), array([1, 3, 5, 7, 9]))\n"
     ]
    }
   ],
   "source": [
    "print(split_array(np.arange(11)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def interleave(a,b):\n",
    "    \"\"\"Interleave two arrays a and b into one and return it\"\"\"\n",
    "    c = np.zeros(len(a)+len(b))\n",
    "    c[0::2] = a\n",
    "    c[1::2] = b\n",
    "    return c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  2  4  6  8 10] [1 3 5 7 9]\n",
      "[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]\n"
     ]
    }
   ],
   "source": [
    "a, b = split_array(np.arange(11))\n",
    "print(a,b)\n",
    "print(interleave(a,b))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matplotlib\n",
    "I will not give details of question 1 here, which is just revision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Plot of cosine function')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig1 = plt.figure(figsize=(14,5))\n",
    "ax1 = fig1.add_subplot(121)\n",
    "x = np.linspace(0,2*np.pi,101)\n",
    "ax1.plot(x,np.sin(x),'b-')\n",
    "ax1.set_xlabel(\"Angle/radians\")\n",
    "ax1.set_ylabel(\"sin(angle)\")\n",
    "ax1.set_title(\"Plot of sine function\")\n",
    "ax2 = fig1.add_subplot(122)\n",
    "ax2.plot(x,np.cos(x),'g-.')\n",
    "ax2.set_xlabel(\"Angle/radians\")\n",
    "ax2.set_ylabel(\"cos(angle)\")\n",
    "ax2.set_title(\"Plot of cosine function\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11bc9aa90>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "array_S6Q3 = np.reshape(np.arange(100),(10,10))\n",
    "plt.imshow(array_S6Q3)\n",
    "# Note that this is over-written - maybe you can see why we need the figure method\n",
    "a = np.ones((10,10))\n",
    "a[1] = 0\n",
    "plt.imshow(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
