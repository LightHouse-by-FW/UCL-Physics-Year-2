{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PHAS0030 Problem Sheet 1\n",
    "## Worked answers\n",
    "\n",
    "These are suggested answers designed to illustrate the methods expected to be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1\n",
    "\n",
    "### Part (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def newton_raphson_z3m1(x0,y0,tol):\n",
    "    \"\"\"Implement Newton-Raphson for a specified function, z^3 - 1 = 0\"\"\"\n",
    "    n = 0\n",
    "    xc = x0\n",
    "    yc = y0\n",
    "    # f(z) real & imaginary\n",
    "    fz_x = xc*xc*xc - 3*xc*yc*yc - 1.0\n",
    "    fz_y = 3*xc*xc*yc - yc*yc*yc\n",
    "    # df/dz real & imaginary\n",
    "    df_x = 3*xc*xc - 3*yc*yc\n",
    "    df_y = 6*xc*yc\n",
    "    # Denominator to find f(z)/f'(z)\n",
    "    denom = (df_x*df_x + df_y*df_y)\n",
    "    while (fz_x*fz_x + fz_y*fz_y)>tol:\n",
    "        n += 1\n",
    "        xc = xc - (fz_x*df_x + fz_y*df_y)/denom\n",
    "        yc = yc - (fz_y*df_x - fz_x*df_y)/denom\n",
    "        fz_x = xc*xc*xc - 3*xc*yc*yc - 1.0\n",
    "        fz_y = 3*xc*xc*yc - yc*yc*yc\n",
    "        df_x = 3*xc*xc - 3*yc*yc\n",
    "        df_y = 6*xc*yc\n",
    "        denom = (df_x*df_x + df_y*df_y)\n",
    "    return xc, yc, n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parts (b) and (c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11e0a8ba8>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 100\n",
    "q1x = np.linspace(-1,1,N)\n",
    "q1y = np.linspace(-1,1,N)\n",
    "res = np.zeros((N,N))\n",
    "tol = 1e-6\n",
    "for i,x in enumerate(q1x):\n",
    "    for j,y in enumerate(q1y):\n",
    "        rx, ry, nit = newton_raphson_z3m1(x,y,tol)\n",
    "        if abs(rx-1.0)<10*tol and abs(ry)<10*tol:\n",
    "            res[i,j] = np.sqrt(nit)\n",
    "        else:\n",
    "            res[i,j] = np.sqrt(nit+5)\n",
    "plt.imshow(res)            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I have stored the number of iterations, and played with a variety of ways of visualising the result.  I think that this is one of the prettier plots (though this should not be the normal criterion for scientific output!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2\n",
    "\n",
    "### Part (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(-5.2,5.2)\n",
    "y = np.linspace(-5.2,5.2)\n",
    "x2d, y2d = np.meshgrid(x,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "surf = (x2d/10)*np.cos(x2d*2*np.pi/5)*(y2d/10)*np.cos(y2d*2*np.pi/3.333)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plotting this with `imshow`, we have the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11e237b38>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(surf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, we can use filled contours with `contourf` which has the advantage of taking the x and y arrays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-5.2, 5.2, -5.2, 5.2)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.contourf(x2d,y2d,surf)\n",
    "plt.axis('scaled')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func2d(x):\n",
    "    \"\"\"Calculate 0.01*xy*cos(2pi x/5)*cos(2pi y/3.333)\"\"\"\n",
    "    return (x[0]/10)*np.cos(x[0]*2*np.pi/5)*(x[1]/10)*np.cos(x[1]*2*np.pi/3.333)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def diff_func2d(x):\n",
    "    \"\"\"Calculate vector derivative of func2d\"\"\"\n",
    "    cosx = np.cos(x[0]*2*np.pi/5)\n",
    "    cosy = np.cos(x[1]*2*np.pi/3.333)\n",
    "    df_dx = cosx*(x[1]/100)*cosy - 2*np.pi*np.sin(x[0]*2*np.pi/5)*(x[0]*x[1]/500)*cosy\n",
    "    df_dy = cosx*(x[0]/100)*cosy - 2*np.pi*cosx*(x[0]*x[1]/333.3)*np.sin(x[1]*2*np.pi/3.333)\n",
    "    return np.array((df_dx,df_dy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import optimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.68463176 1.81703681] 8\n"
     ]
    }
   ],
   "source": [
    "x1 = np.array((-0.5,1.5))\n",
    "ret1 = optimize.minimize(func2d,x1,method='CG',jac=diff_func2d)\n",
    "print(ret1.x, ret1.nit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-5.12264925 -5.05495327] 6\n"
     ]
    }
   ],
   "source": [
    "x2 = np.array((-5,-5))\n",
    "ret2 = optimize.minimize(func2d,x2,method='CG',jac=diff_func2d)\n",
    "print(ret2.x, ret2.nit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-5.12263912  3.41475123] 10\n"
     ]
    }
   ],
   "source": [
    "x3 = np.array((-5,5))\n",
    "ret3 = optimize.minimize(func2d,x3,method='CG',jac=diff_func2d)\n",
    "print(ret3.x, ret3.nit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x151fa5acf8>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.contourf(x2d,y2d,surf)\n",
    "plt.plot(-0.5,1.5,'bo')\n",
    "plt.plot(ret1.x[0],ret1.x[1],'ro')\n",
    "plt.plot(-5,-5,'bo')\n",
    "plt.plot(ret2.x[0],ret2.x[1],'ro')\n",
    "plt.plot(-5,5,'bo')\n",
    "plt.plot(ret3.x[0],ret3.x[1],'ro')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I have plotted the starting points with blue dots and the end points with red dots; it's clear that the final result depends strongly on where we start."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3\n",
    "\n",
    "### Part (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gxy(x):\n",
    "    \"\"\"Calculate 1.5*x*x + 2*x*y + 3*y*y - x + 4*y\"\"\"\n",
    "    return 1.5*x[0]*x[0] + 2*x[0]*x[1] + 3*x[1]*x[1] - x[0] + 4*x[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def diff_gxy(x):\n",
    "    \"\"\"Calculate vector differential of gxy\"\"\"\n",
    "    dg_dx = 3*x[0] + 2*x[1] - 1.0\n",
    "    dg_dy = 2*x[0] + 6*x[1] + 4.0\n",
    "    return np.array((dg_dx,dg_dy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Search direction is  [-8.  4.]\n"
     ]
    }
   ],
   "source": [
    "x0 = np.array((5.0,-3.0))\n",
    "search = -diff_gxy(x0)\n",
    "print(\"Search direction is \",search)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimum lambda is  0.5\n",
      "Minimum is at  [ 1. -1.]\n"
     ]
    }
   ],
   "source": [
    "lam = optimize.line_search(gxy,diff_gxy, x0, search)\n",
    "print(\"Optimum lambda is \",lam[0])\n",
    "print(\"Minimum is at \",x0+lam[0]*search)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def steepest_descent(fun,df,x0,tol):\n",
    "    \"\"\"Search for minimum using steepest descents.\n",
    "    Inputs:\n",
    "    fun (function)\n",
    "    df  (vector derivative of function)\n",
    "    x0  (starting point)\n",
    "    tol (tolerance)\n",
    "    \n",
    "    Outputs:\n",
    "    min (location of minimum)\n",
    "    fmin(value of fun at minimum)\n",
    "    nit (number of iterations)\"\"\"\n",
    "    nit = 0\n",
    "    xc = x0\n",
    "    search_dir = -df(xc)\n",
    "    while search_dir[0]*search_dir[0]+search_dir[1]*search_dir[1]>tol and nit<100:\n",
    "        nit += 1\n",
    "        lam = optimize.line_search(fun,df,xc,search_dir)\n",
    "        xc += lam[0]*search_dir\n",
    "        search_dir = -df(xc)\n",
    "    return xc, fun(xc), nit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum at  [ 1. -1.]\n",
      "Value is  -2.5\n",
      "Iterations:  1\n"
     ]
    }
   ],
   "source": [
    "q3_ret1 = steepest_descent(gxy,diff_gxy,np.array((5.0,-3.0)),1e-4)\n",
    "print(\"Minimum at \",q3_ret1[0])\n",
    "print(\"Value is \",q3_ret1[1])\n",
    "print(\"Iterations: \",q3_ret1[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum at  [ 0.9981663  -0.99867566]\n",
      "Value is  -2.4999945515641793\n",
      "Iterations:  11\n"
     ]
    }
   ],
   "source": [
    "q3_ret2 = steepest_descent(gxy,diff_gxy,np.array((-3.0,-1.0)),1e-4)\n",
    "print(\"Minimum at \",q3_ret2[0])\n",
    "print(\"Value is \",q3_ret2[1])\n",
    "print(\"Iterations: \",q3_ret2[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The change from 1 iteration to 11 is quite startling: steepest descents is often inefficient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
